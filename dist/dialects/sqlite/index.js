'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

const _ = require('lodash');

const AbstractDialect = require('../abstract');

const ConnectionManager = require('./connection-manager');

const Query = require('./query');

const QueryGenerator = require('./query-generator');

const DataTypes = require('../../data-types').sqlite;

let SqliteDialect =
/*#__PURE__*/
function (_AbstractDialect) {
  _inherits(SqliteDialect, _AbstractDialect);

  function SqliteDialect(sequelize) {
    var _this;

    _classCallCheck(this, SqliteDialect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SqliteDialect).call(this));
    _this.sequelize = sequelize;
    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);
    _this.QueryGenerator = new QueryGenerator({
      _dialect: _assertThisInitialized(_this),
      sequelize
    });
    return _this;
  }

  return SqliteDialect;
}(AbstractDialect);

SqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
  'DEFAULT': false,
  'DEFAULT VALUES': true,
  'UNION ALL': false,
  'RIGHT JOIN': false,
  inserts: {
    ignoreDuplicates: ' OR IGNORE',
    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'
  },
  index: {
    using: false,
    where: true,
    functionBased: true
  },
  transactionOptions: {
    type: true
  },
  constraints: {
    addConstraint: false,
    dropConstraint: false
  },
  joinTableDependent: false,
  groupedLimit: false,
  JSON: true
});
ConnectionManager.prototype.defaultVersion = '3.8.0';
SqliteDialect.prototype.Query = Query;
SqliteDialect.prototype.DataTypes = DataTypes;
SqliteDialect.prototype.name = 'sqlite';
SqliteDialect.prototype.TICK_CHAR = '`';
SqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;
SqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;
module.exports = SqliteDialect;
module.exports.SqliteDialect = SqliteDialect;
module.exports.default = SqliteDialect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9kaWFsZWN0cy9zcWxpdGUvaW5kZXguanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJBYnN0cmFjdERpYWxlY3QiLCJDb25uZWN0aW9uTWFuYWdlciIsIlF1ZXJ5IiwiUXVlcnlHZW5lcmF0b3IiLCJEYXRhVHlwZXMiLCJzcWxpdGUiLCJTcWxpdGVEaWFsZWN0Iiwic2VxdWVsaXplIiwiY29ubmVjdGlvbk1hbmFnZXIiLCJfZGlhbGVjdCIsInByb3RvdHlwZSIsInN1cHBvcnRzIiwibWVyZ2UiLCJjbG9uZURlZXAiLCJpbnNlcnRzIiwiaWdub3JlRHVwbGljYXRlcyIsInVwZGF0ZU9uRHVwbGljYXRlIiwiaW5kZXgiLCJ1c2luZyIsIndoZXJlIiwiZnVuY3Rpb25CYXNlZCIsInRyYW5zYWN0aW9uT3B0aW9ucyIsInR5cGUiLCJjb25zdHJhaW50cyIsImFkZENvbnN0cmFpbnQiLCJkcm9wQ29uc3RyYWludCIsImpvaW5UYWJsZURlcGVuZGVudCIsImdyb3VwZWRMaW1pdCIsIkpTT04iLCJkZWZhdWx0VmVyc2lvbiIsIm5hbWUiLCJUSUNLX0NIQVIiLCJUSUNLX0NIQVJfTEVGVCIsIlRJQ0tfQ0hBUl9SSUdIVCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1DLGVBQWUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBL0I7O0FBQ0EsTUFBTUUsaUJBQWlCLEdBQUdGLE9BQU8sQ0FBQyxzQkFBRCxDQUFqQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLE1BQU1JLGNBQWMsR0FBR0osT0FBTyxDQUFDLG1CQUFELENBQTlCOztBQUNBLE1BQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLGtCQUFELENBQVAsQ0FBNEJNLE1BQTlDOztJQUVNQyxhOzs7OztBQUNKLHlCQUFZQyxTQUFaLEVBQXVCO0FBQUE7O0FBQUE7O0FBQ3JCO0FBQ0EsVUFBS0EsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxVQUFLQyxpQkFBTCxHQUF5QixJQUFJUCxpQkFBSixnQ0FBNEJNLFNBQTVCLENBQXpCO0FBQ0EsVUFBS0osY0FBTCxHQUFzQixJQUFJQSxjQUFKLENBQW1CO0FBQ3ZDTSxNQUFBQSxRQUFRLCtCQUQrQjtBQUV2Q0YsTUFBQUE7QUFGdUMsS0FBbkIsQ0FBdEI7QUFKcUI7QUFRdEI7OztFQVR5QlAsZTs7QUFZNUJNLGFBQWEsQ0FBQ0ksU0FBZCxDQUF3QkMsUUFBeEIsR0FBbUNiLENBQUMsQ0FBQ2MsS0FBRixDQUFRZCxDQUFDLENBQUNlLFNBQUYsQ0FBWWIsZUFBZSxDQUFDVSxTQUFoQixDQUEwQkMsUUFBdEMsQ0FBUixFQUF5RDtBQUMxRixhQUFXLEtBRCtFO0FBRTFGLG9CQUFrQixJQUZ3RTtBQUcxRixlQUFhLEtBSDZFO0FBSTFGLGdCQUFjLEtBSjRFO0FBSzFGRyxFQUFBQSxPQUFPLEVBQUU7QUFDUEMsSUFBQUEsZ0JBQWdCLEVBQUUsWUFEWDtBQUVQQyxJQUFBQSxpQkFBaUIsRUFBRTtBQUZaLEdBTGlGO0FBUzFGQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsS0FBSyxFQUFFLEtBREY7QUFFTEMsSUFBQUEsS0FBSyxFQUFFLElBRkY7QUFHTEMsSUFBQUEsYUFBYSxFQUFFO0FBSFYsR0FUbUY7QUFjMUZDLEVBQUFBLGtCQUFrQixFQUFFO0FBQ2xCQyxJQUFBQSxJQUFJLEVBQUU7QUFEWSxHQWRzRTtBQWlCMUZDLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxhQUFhLEVBQUUsS0FESjtBQUVYQyxJQUFBQSxjQUFjLEVBQUU7QUFGTCxHQWpCNkU7QUFxQjFGQyxFQUFBQSxrQkFBa0IsRUFBRSxLQXJCc0U7QUFzQjFGQyxFQUFBQSxZQUFZLEVBQUUsS0F0QjRFO0FBdUIxRkMsRUFBQUEsSUFBSSxFQUFFO0FBdkJvRixDQUF6RCxDQUFuQztBQTBCQTNCLGlCQUFpQixDQUFDUyxTQUFsQixDQUE0Qm1CLGNBQTVCLEdBQTZDLE9BQTdDO0FBQ0F2QixhQUFhLENBQUNJLFNBQWQsQ0FBd0JSLEtBQXhCLEdBQWdDQSxLQUFoQztBQUNBSSxhQUFhLENBQUNJLFNBQWQsQ0FBd0JOLFNBQXhCLEdBQW9DQSxTQUFwQztBQUNBRSxhQUFhLENBQUNJLFNBQWQsQ0FBd0JvQixJQUF4QixHQUErQixRQUEvQjtBQUNBeEIsYUFBYSxDQUFDSSxTQUFkLENBQXdCcUIsU0FBeEIsR0FBb0MsR0FBcEM7QUFDQXpCLGFBQWEsQ0FBQ0ksU0FBZCxDQUF3QnNCLGNBQXhCLEdBQXlDMUIsYUFBYSxDQUFDSSxTQUFkLENBQXdCcUIsU0FBakU7QUFDQXpCLGFBQWEsQ0FBQ0ksU0FBZCxDQUF3QnVCLGVBQXhCLEdBQTBDM0IsYUFBYSxDQUFDSSxTQUFkLENBQXdCcUIsU0FBbEU7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0IsYUFBakI7QUFDQTRCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlN0IsYUFBZixHQUErQkEsYUFBL0I7QUFDQTRCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxPQUFmLEdBQXlCOUIsYUFBekIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbmNvbnN0IEFic3RyYWN0RGlhbGVjdCA9IHJlcXVpcmUoJy4uL2Fic3RyYWN0Jyk7XHJcbmNvbnN0IENvbm5lY3Rpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uLW1hbmFnZXInKTtcclxuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5Jyk7XHJcbmNvbnN0IFF1ZXJ5R2VuZXJhdG9yID0gcmVxdWlyZSgnLi9xdWVyeS1nZW5lcmF0b3InKTtcclxuY29uc3QgRGF0YVR5cGVzID0gcmVxdWlyZSgnLi4vLi4vZGF0YS10eXBlcycpLnNxbGl0ZTtcclxuXHJcbmNsYXNzIFNxbGl0ZURpYWxlY3QgZXh0ZW5kcyBBYnN0cmFjdERpYWxlY3Qge1xyXG4gIGNvbnN0cnVjdG9yKHNlcXVlbGl6ZSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuc2VxdWVsaXplID0gc2VxdWVsaXplO1xyXG4gICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlciA9IG5ldyBDb25uZWN0aW9uTWFuYWdlcih0aGlzLCBzZXF1ZWxpemUpO1xyXG4gICAgdGhpcy5RdWVyeUdlbmVyYXRvciA9IG5ldyBRdWVyeUdlbmVyYXRvcih7XHJcbiAgICAgIF9kaWFsZWN0OiB0aGlzLFxyXG4gICAgICBzZXF1ZWxpemVcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuU3FsaXRlRGlhbGVjdC5wcm90b3R5cGUuc3VwcG9ydHMgPSBfLm1lcmdlKF8uY2xvbmVEZWVwKEFic3RyYWN0RGlhbGVjdC5wcm90b3R5cGUuc3VwcG9ydHMpLCB7XHJcbiAgJ0RFRkFVTFQnOiBmYWxzZSxcclxuICAnREVGQVVMVCBWQUxVRVMnOiB0cnVlLFxyXG4gICdVTklPTiBBTEwnOiBmYWxzZSxcclxuICAnUklHSFQgSk9JTic6IGZhbHNlLFxyXG4gIGluc2VydHM6IHtcclxuICAgIGlnbm9yZUR1cGxpY2F0ZXM6ICcgT1IgSUdOT1JFJyxcclxuICAgIHVwZGF0ZU9uRHVwbGljYXRlOiAnIE9OIENPTkZMSUNUIERPIFVQREFURSBTRVQnXHJcbiAgfSxcclxuICBpbmRleDoge1xyXG4gICAgdXNpbmc6IGZhbHNlLFxyXG4gICAgd2hlcmU6IHRydWUsXHJcbiAgICBmdW5jdGlvbkJhc2VkOiB0cnVlXHJcbiAgfSxcclxuICB0cmFuc2FjdGlvbk9wdGlvbnM6IHtcclxuICAgIHR5cGU6IHRydWVcclxuICB9LFxyXG4gIGNvbnN0cmFpbnRzOiB7XHJcbiAgICBhZGRDb25zdHJhaW50OiBmYWxzZSxcclxuICAgIGRyb3BDb25zdHJhaW50OiBmYWxzZVxyXG4gIH0sXHJcbiAgam9pblRhYmxlRGVwZW5kZW50OiBmYWxzZSxcclxuICBncm91cGVkTGltaXQ6IGZhbHNlLFxyXG4gIEpTT046IHRydWVcclxufSk7XHJcblxyXG5Db25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZGVmYXVsdFZlcnNpb24gPSAnMy44LjAnO1xyXG5TcWxpdGVEaWFsZWN0LnByb3RvdHlwZS5RdWVyeSA9IFF1ZXJ5O1xyXG5TcWxpdGVEaWFsZWN0LnByb3RvdHlwZS5EYXRhVHlwZXMgPSBEYXRhVHlwZXM7XHJcblNxbGl0ZURpYWxlY3QucHJvdG90eXBlLm5hbWUgPSAnc3FsaXRlJztcclxuU3FsaXRlRGlhbGVjdC5wcm90b3R5cGUuVElDS19DSEFSID0gJ2AnO1xyXG5TcWxpdGVEaWFsZWN0LnByb3RvdHlwZS5USUNLX0NIQVJfTEVGVCA9IFNxbGl0ZURpYWxlY3QucHJvdG90eXBlLlRJQ0tfQ0hBUjtcclxuU3FsaXRlRGlhbGVjdC5wcm90b3R5cGUuVElDS19DSEFSX1JJR0hUID0gU3FsaXRlRGlhbGVjdC5wcm90b3R5cGUuVElDS19DSEFSO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTcWxpdGVEaWFsZWN0O1xyXG5tb2R1bGUuZXhwb3J0cy5TcWxpdGVEaWFsZWN0ID0gU3FsaXRlRGlhbGVjdDtcclxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IFNxbGl0ZURpYWxlY3Q7XHJcbiJdfQ==