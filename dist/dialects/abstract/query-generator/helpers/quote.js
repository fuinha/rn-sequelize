/**
 * Quote helpers implement quote ability for all dialects.
 * These are basic block of query building
 *
 * Its better to implement all dialect implementation together here. Which will allow
 * even abstract generator to use them by just specifying dialect type.
 *
 * Defining these helpers in each query dialect will leave
 * code in dual dependency of abstract <-> specific dialect
 */
'use strict';

const Utils = require('../../../../utils');
/**
 * list of reserved words in PostgreSQL 10
 * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html
 *
 * @private
 */


const postgresReservedWords = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');
/**
 *
 * @param {string}  dialect         Dialect name
 * @param {string}  identifier      Identifier to quote
 * @param {Object}  [options]
 * @param {boolean} [options.force=false]
 * @param {boolean} [options.quoteIdentifiers=true]
 *
 * @returns {string}
 * @private
 */

function quoteIdentifier(dialect, identifier, options) {
  if (identifier === '*') return identifier;
  options = Utils.defaults(options || {}, {
    force: false,
    quoteIdentifiers: true
  });

  switch (dialect) {
    case 'sqlite':
    case 'mariadb':
    case 'mysql':
      return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');

    case 'postgres':
      const rawIdentifier = Utils.removeTicks(identifier, '"');

      if (options.force !== true && options.quoteIdentifiers === false && !identifier.includes('.') && !identifier.includes('->') && !postgresReservedWords.includes(rawIdentifier.toLowerCase())) {
        // In Postgres, if tables or attributes are created double-quoted,
        // they are also case sensitive. If they contain any uppercase
        // characters, they must always be double-quoted. This makes it
        // impossible to write queries in portable SQL if tables are created in
        // this way. Hence, we strip quotes if we don't want case sensitivity.
        return rawIdentifier;
      }

      return Utils.addTicks(rawIdentifier, '"');

    case 'mssql':
      return `[${identifier.replace(/[[\]']+/g, '')}]`;

    default:
      throw new Error(`Dialect "${dialect}" is not supported`);
  }
}

module.exports.quoteIdentifier = quoteIdentifier;
/**
 * Test if a give string is already quoted
 *
 * @param {string} identifier
 *
 * @returns {boolean}
 * @private
 */

function isIdentifierQuoted(identifier) {
  return /^\s*(?:([`"'])(?:(?!\1).|\1{2})*\1\.?)+\s*$/i.test(identifier);
}

module.exports.isIdentifierQuoted = isIdentifierQuoted;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYi9kaWFsZWN0cy9hYnN0cmFjdC9xdWVyeS1nZW5lcmF0b3IvaGVscGVycy9xdW90ZS5qcyJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJwb3N0Z3Jlc1Jlc2VydmVkV29yZHMiLCJzcGxpdCIsInF1b3RlSWRlbnRpZmllciIsImRpYWxlY3QiLCJpZGVudGlmaWVyIiwib3B0aW9ucyIsImRlZmF1bHRzIiwiZm9yY2UiLCJxdW90ZUlkZW50aWZpZXJzIiwiYWRkVGlja3MiLCJyZW1vdmVUaWNrcyIsInJhd0lkZW50aWZpZXIiLCJpbmNsdWRlcyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzSWRlbnRpZmllclF1b3RlZCIsInRlc3QiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBV0E7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBckI7QUFFQTs7Ozs7Ozs7QUFNQSxNQUFNQyxxQkFBcUIsR0FBRyxpdUJBQWl1QkMsS0FBanVCLENBQXV1QixHQUF2dUIsQ0FBOUI7QUFFQTs7Ozs7Ozs7Ozs7O0FBV0EsU0FBU0MsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLFVBQWxDLEVBQThDQyxPQUE5QyxFQUF1RDtBQUNyRCxNQUFJRCxVQUFVLEtBQUssR0FBbkIsRUFBd0IsT0FBT0EsVUFBUDtBQUV4QkMsRUFBQUEsT0FBTyxHQUFHUCxLQUFLLENBQUNRLFFBQU4sQ0FBZUQsT0FBTyxJQUFJLEVBQTFCLEVBQThCO0FBQ3RDRSxJQUFBQSxLQUFLLEVBQUUsS0FEK0I7QUFFdENDLElBQUFBLGdCQUFnQixFQUFFO0FBRm9CLEdBQTlCLENBQVY7O0FBS0EsVUFBUUwsT0FBUjtBQUNFLFNBQUssUUFBTDtBQUNBLFNBQUssU0FBTDtBQUNBLFNBQUssT0FBTDtBQUNFLGFBQU9MLEtBQUssQ0FBQ1csUUFBTixDQUFlWCxLQUFLLENBQUNZLFdBQU4sQ0FBa0JOLFVBQWxCLEVBQThCLEdBQTlCLENBQWYsRUFBbUQsR0FBbkQsQ0FBUDs7QUFFRixTQUFLLFVBQUw7QUFDRSxZQUFNTyxhQUFhLEdBQUdiLEtBQUssQ0FBQ1ksV0FBTixDQUFrQk4sVUFBbEIsRUFBOEIsR0FBOUIsQ0FBdEI7O0FBRUEsVUFDRUMsT0FBTyxDQUFDRSxLQUFSLEtBQWtCLElBQWxCLElBQ0FGLE9BQU8sQ0FBQ0csZ0JBQVIsS0FBNkIsS0FEN0IsSUFFQSxDQUFDSixVQUFVLENBQUNRLFFBQVgsQ0FBb0IsR0FBcEIsQ0FGRCxJQUdBLENBQUNSLFVBQVUsQ0FBQ1EsUUFBWCxDQUFvQixJQUFwQixDQUhELElBSUEsQ0FBQ1oscUJBQXFCLENBQUNZLFFBQXRCLENBQStCRCxhQUFhLENBQUNFLFdBQWQsRUFBL0IsQ0FMSCxFQU1FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQU9GLGFBQVA7QUFDRDs7QUFDRCxhQUFPYixLQUFLLENBQUNXLFFBQU4sQ0FBZUUsYUFBZixFQUE4QixHQUE5QixDQUFQOztBQUNGLFNBQUssT0FBTDtBQUNFLGFBQVEsSUFBR1AsVUFBVSxDQUFDVSxPQUFYLENBQW1CLFVBQW5CLEVBQStCLEVBQS9CLENBQW1DLEdBQTlDOztBQUVGO0FBQ0UsWUFBTSxJQUFJQyxLQUFKLENBQVcsWUFBV1osT0FBUSxvQkFBOUIsQ0FBTjtBQTVCSjtBQThCRDs7QUFDRGEsTUFBTSxDQUFDQyxPQUFQLENBQWVmLGVBQWYsR0FBaUNBLGVBQWpDO0FBRUE7Ozs7Ozs7OztBQVFBLFNBQVNnQixrQkFBVCxDQUE0QmQsVUFBNUIsRUFBd0M7QUFDdEMsU0FBTywrQ0FBK0NlLElBQS9DLENBQW9EZixVQUFwRCxDQUFQO0FBQ0Q7O0FBQ0RZLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxrQkFBZixHQUFvQ0Esa0JBQXBDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFF1b3RlIGhlbHBlcnMgaW1wbGVtZW50IHF1b3RlIGFiaWxpdHkgZm9yIGFsbCBkaWFsZWN0cy5cclxuICogVGhlc2UgYXJlIGJhc2ljIGJsb2NrIG9mIHF1ZXJ5IGJ1aWxkaW5nXHJcbiAqXHJcbiAqIEl0cyBiZXR0ZXIgdG8gaW1wbGVtZW50IGFsbCBkaWFsZWN0IGltcGxlbWVudGF0aW9uIHRvZ2V0aGVyIGhlcmUuIFdoaWNoIHdpbGwgYWxsb3dcclxuICogZXZlbiBhYnN0cmFjdCBnZW5lcmF0b3IgdG8gdXNlIHRoZW0gYnkganVzdCBzcGVjaWZ5aW5nIGRpYWxlY3QgdHlwZS5cclxuICpcclxuICogRGVmaW5pbmcgdGhlc2UgaGVscGVycyBpbiBlYWNoIHF1ZXJ5IGRpYWxlY3Qgd2lsbCBsZWF2ZVxyXG4gKiBjb2RlIGluIGR1YWwgZGVwZW5kZW5jeSBvZiBhYnN0cmFjdCA8LT4gc3BlY2lmaWMgZGlhbGVjdFxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbHMnKTtcclxuXHJcbi8qKlxyXG4gKiBsaXN0IG9mIHJlc2VydmVkIHdvcmRzIGluIFBvc3RncmVTUUwgMTBcclxuICogc291cmNlOiBodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9kb2NzLzEwL3N0YXRpYy9zcWwta2V5d29yZHMtYXBwZW5kaXguaHRtbFxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgcG9zdGdyZXNSZXNlcnZlZFdvcmRzID0gJ2FsbCxhbmFseXNlLGFuYWx5emUsYW5kLGFueSxhcnJheSxhcyxhc2MsYXN5bW1ldHJpYyxhdXRob3JpemF0aW9uLGJpbmFyeSxib3RoLGNhc2UsY2FzdCxjaGVjayxjb2xsYXRlLGNvbGxhdGlvbixjb2x1bW4sY29uY3VycmVudGx5LGNvbnN0cmFpbnQsY3JlYXRlLGNyb3NzLGN1cnJlbnRfY2F0YWxvZyxjdXJyZW50X2RhdGUsY3VycmVudF9yb2xlLGN1cnJlbnRfc2NoZW1hLGN1cnJlbnRfdGltZSxjdXJyZW50X3RpbWVzdGFtcCxjdXJyZW50X3VzZXIsZGVmYXVsdCxkZWZlcnJhYmxlLGRlc2MsZGlzdGluY3QsZG8sZWxzZSxlbmQsZXhjZXB0LGZhbHNlLGZldGNoLGZvcixmb3JlaWduLGZyZWV6ZSxmcm9tLGZ1bGwsZ3JhbnQsZ3JvdXAsaGF2aW5nLGlsaWtlLGluLGluaXRpYWxseSxpbm5lcixpbnRlcnNlY3QsaW50byxpcyxpc251bGwsam9pbixsYXRlcmFsLGxlYWRpbmcsbGVmdCxsaWtlLGxpbWl0LGxvY2FsdGltZSxsb2NhbHRpbWVzdGFtcCxuYXR1cmFsLG5vdCxub3RudWxsLG51bGwsb2Zmc2V0LG9uLG9ubHksb3Isb3JkZXIsb3V0ZXIsb3ZlcmxhcHMscGxhY2luZyxwcmltYXJ5LHJlZmVyZW5jZXMscmV0dXJuaW5nLHJpZ2h0LHNlbGVjdCxzZXNzaW9uX3VzZXIsc2ltaWxhcixzb21lLHN5bW1ldHJpYyx0YWJsZSx0YWJsZXNhbXBsZSx0aGVuLHRvLHRyYWlsaW5nLHRydWUsdW5pb24sdW5pcXVlLHVzZXIsdXNpbmcsdmFyaWFkaWMsdmVyYm9zZSx3aGVuLHdoZXJlLHdpbmRvdyx3aXRoJy5zcGxpdCgnLCcpO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSAgZGlhbGVjdCAgICAgICAgIERpYWxlY3QgbmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gIGlkZW50aWZpZXIgICAgICBJZGVudGlmaWVyIHRvIHF1b3RlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSAgW29wdGlvbnNdXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZm9yY2U9ZmFsc2VdXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucXVvdGVJZGVudGlmaWVycz10cnVlXVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcXVvdGVJZGVudGlmaWVyKGRpYWxlY3QsIGlkZW50aWZpZXIsIG9wdGlvbnMpIHtcclxuICBpZiAoaWRlbnRpZmllciA9PT0gJyonKSByZXR1cm4gaWRlbnRpZmllcjtcclxuXHJcbiAgb3B0aW9ucyA9IFV0aWxzLmRlZmF1bHRzKG9wdGlvbnMgfHwge30sIHtcclxuICAgIGZvcmNlOiBmYWxzZSxcclxuICAgIHF1b3RlSWRlbnRpZmllcnM6IHRydWVcclxuICB9KTtcclxuXHJcbiAgc3dpdGNoIChkaWFsZWN0KSB7XHJcbiAgICBjYXNlICdzcWxpdGUnOlxyXG4gICAgY2FzZSAnbWFyaWFkYic6XHJcbiAgICBjYXNlICdteXNxbCc6XHJcbiAgICAgIHJldHVybiBVdGlscy5hZGRUaWNrcyhVdGlscy5yZW1vdmVUaWNrcyhpZGVudGlmaWVyLCAnYCcpLCAnYCcpO1xyXG5cclxuICAgIGNhc2UgJ3Bvc3RncmVzJzpcclxuICAgICAgY29uc3QgcmF3SWRlbnRpZmllciA9IFV0aWxzLnJlbW92ZVRpY2tzKGlkZW50aWZpZXIsICdcIicpO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIG9wdGlvbnMuZm9yY2UgIT09IHRydWUgJiZcclxuICAgICAgICBvcHRpb25zLnF1b3RlSWRlbnRpZmllcnMgPT09IGZhbHNlICYmXHJcbiAgICAgICAgIWlkZW50aWZpZXIuaW5jbHVkZXMoJy4nKSAmJlxyXG4gICAgICAgICFpZGVudGlmaWVyLmluY2x1ZGVzKCctPicpICYmXHJcbiAgICAgICAgIXBvc3RncmVzUmVzZXJ2ZWRXb3Jkcy5pbmNsdWRlcyhyYXdJZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vIEluIFBvc3RncmVzLCBpZiB0YWJsZXMgb3IgYXR0cmlidXRlcyBhcmUgY3JlYXRlZCBkb3VibGUtcXVvdGVkLFxyXG4gICAgICAgIC8vIHRoZXkgYXJlIGFsc28gY2FzZSBzZW5zaXRpdmUuIElmIHRoZXkgY29udGFpbiBhbnkgdXBwZXJjYXNlXHJcbiAgICAgICAgLy8gY2hhcmFjdGVycywgdGhleSBtdXN0IGFsd2F5cyBiZSBkb3VibGUtcXVvdGVkLiBUaGlzIG1ha2VzIGl0XHJcbiAgICAgICAgLy8gaW1wb3NzaWJsZSB0byB3cml0ZSBxdWVyaWVzIGluIHBvcnRhYmxlIFNRTCBpZiB0YWJsZXMgYXJlIGNyZWF0ZWQgaW5cclxuICAgICAgICAvLyB0aGlzIHdheS4gSGVuY2UsIHdlIHN0cmlwIHF1b3RlcyBpZiB3ZSBkb24ndCB3YW50IGNhc2Ugc2Vuc2l0aXZpdHkuXHJcbiAgICAgICAgcmV0dXJuIHJhd0lkZW50aWZpZXI7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFV0aWxzLmFkZFRpY2tzKHJhd0lkZW50aWZpZXIsICdcIicpO1xyXG4gICAgY2FzZSAnbXNzcWwnOlxyXG4gICAgICByZXR1cm4gYFske2lkZW50aWZpZXIucmVwbGFjZSgvW1tcXF0nXSsvZywgJycpfV1gO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRGlhbGVjdCBcIiR7ZGlhbGVjdH1cIiBpcyBub3Qgc3VwcG9ydGVkYCk7XHJcbiAgfVxyXG59XHJcbm1vZHVsZS5leHBvcnRzLnF1b3RlSWRlbnRpZmllciA9IHF1b3RlSWRlbnRpZmllcjtcclxuXHJcbi8qKlxyXG4gKiBUZXN0IGlmIGEgZ2l2ZSBzdHJpbmcgaXMgYWxyZWFkeSBxdW90ZWRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXJcclxuICpcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJRdW90ZWQoaWRlbnRpZmllcikge1xyXG4gIHJldHVybiAvXlxccyooPzooW2BcIiddKSg/Oig/IVxcMSkufFxcMXsyfSkqXFwxXFwuPykrXFxzKiQvaS50ZXN0KGlkZW50aWZpZXIpO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzLmlzSWRlbnRpZmllclF1b3RlZCA9IGlzSWRlbnRpZmllclF1b3RlZDtcclxuIl19