'use strict';

const _ = require('lodash');

const Op = require('../../../operators');

const Utils = require('../../../utils');

const OperatorHelpers = {
  OperatorMap: {
    [Op.eq]: '=',
    [Op.ne]: '!=',
    [Op.gte]: '>=',
    [Op.gt]: '>',
    [Op.lte]: '<=',
    [Op.lt]: '<',
    [Op.not]: 'IS NOT',
    [Op.is]: 'IS',
    [Op.in]: 'IN',
    [Op.notIn]: 'NOT IN',
    [Op.like]: 'LIKE',
    [Op.notLike]: 'NOT LIKE',
    [Op.iLike]: 'ILIKE',
    [Op.notILike]: 'NOT ILIKE',
    [Op.startsWith]: 'LIKE',
    [Op.endsWith]: 'LIKE',
    [Op.substring]: 'LIKE',
    [Op.regexp]: '~',
    [Op.notRegexp]: '!~',
    [Op.iRegexp]: '~*',
    [Op.notIRegexp]: '!~*',
    [Op.between]: 'BETWEEN',
    [Op.notBetween]: 'NOT BETWEEN',
    [Op.overlap]: '&&',
    [Op.contains]: '@>',
    [Op.contained]: '<@',
    [Op.adjacent]: '-|-',
    [Op.strictLeft]: '<<',
    [Op.strictRight]: '>>',
    [Op.noExtendRight]: '&<',
    [Op.noExtendLeft]: '&>',
    [Op.any]: 'ANY',
    [Op.all]: 'ALL',
    [Op.and]: ' AND ',
    [Op.or]: ' OR ',
    [Op.col]: 'COL',
    [Op.placeholder]: '$$PLACEHOLDER$$'
  },
  OperatorsAliasMap: {},

  setOperatorsAliases(aliases) {
    if (!aliases || _.isEmpty(aliases)) {
      this.OperatorsAliasMap = false;
    } else {
      this.OperatorsAliasMap = Object.assign({}, aliases);
    }
  },

  _replaceAliases(orig) {
    const obj = {};

    if (!this.OperatorsAliasMap) {
      return orig;
    }

    Utils.getOperators(orig).forEach(op => {
      const item = orig[op];

      if (_.isPlainObject(item)) {
        obj[op] = this._replaceAliases(item);
      } else {
        obj[op] = item;
      }
    });

    _.forOwn(orig, (item, prop) => {
      prop = this.OperatorsAliasMap[prop] || prop;

      if (_.isPlainObject(item)) {
        item = this._replaceAliases(item);
      }

      obj[prop] = item;
    });

    return obj;
  }

};
module.exports = OperatorHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9kaWFsZWN0cy9hYnN0cmFjdC9xdWVyeS1nZW5lcmF0b3Ivb3BlcmF0b3JzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiT3AiLCJVdGlscyIsIk9wZXJhdG9ySGVscGVycyIsIk9wZXJhdG9yTWFwIiwiZXEiLCJuZSIsImd0ZSIsImd0IiwibHRlIiwibHQiLCJub3QiLCJpcyIsImluIiwibm90SW4iLCJsaWtlIiwibm90TGlrZSIsImlMaWtlIiwibm90SUxpa2UiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJyZWdleHAiLCJub3RSZWdleHAiLCJpUmVnZXhwIiwibm90SVJlZ2V4cCIsImJldHdlZW4iLCJub3RCZXR3ZWVuIiwib3ZlcmxhcCIsImNvbnRhaW5zIiwiY29udGFpbmVkIiwiYWRqYWNlbnQiLCJzdHJpY3RMZWZ0Iiwic3RyaWN0UmlnaHQiLCJub0V4dGVuZFJpZ2h0Iiwibm9FeHRlbmRMZWZ0IiwiYW55IiwiYWxsIiwiYW5kIiwib3IiLCJjb2wiLCJwbGFjZWhvbGRlciIsIk9wZXJhdG9yc0FsaWFzTWFwIiwic2V0T3BlcmF0b3JzQWxpYXNlcyIsImFsaWFzZXMiLCJpc0VtcHR5IiwiT2JqZWN0IiwiYXNzaWduIiwiX3JlcGxhY2VBbGlhc2VzIiwib3JpZyIsIm9iaiIsImdldE9wZXJhdG9ycyIsImZvckVhY2giLCJvcCIsIml0ZW0iLCJpc1BsYWluT2JqZWN0IiwiZm9yT3duIiwicHJvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBbEI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsZ0JBQUQsQ0FBckI7O0FBRUEsTUFBTUcsZUFBZSxHQUFHO0FBQ3RCQyxFQUFBQSxXQUFXLEVBQUU7QUFDWCxLQUFDSCxFQUFFLENBQUNJLEVBQUosR0FBUyxHQURFO0FBRVgsS0FBQ0osRUFBRSxDQUFDSyxFQUFKLEdBQVMsSUFGRTtBQUdYLEtBQUNMLEVBQUUsQ0FBQ00sR0FBSixHQUFVLElBSEM7QUFJWCxLQUFDTixFQUFFLENBQUNPLEVBQUosR0FBUyxHQUpFO0FBS1gsS0FBQ1AsRUFBRSxDQUFDUSxHQUFKLEdBQVUsSUFMQztBQU1YLEtBQUNSLEVBQUUsQ0FBQ1MsRUFBSixHQUFTLEdBTkU7QUFPWCxLQUFDVCxFQUFFLENBQUNVLEdBQUosR0FBVSxRQVBDO0FBUVgsS0FBQ1YsRUFBRSxDQUFDVyxFQUFKLEdBQVMsSUFSRTtBQVNYLEtBQUNYLEVBQUUsQ0FBQ1ksRUFBSixHQUFTLElBVEU7QUFVWCxLQUFDWixFQUFFLENBQUNhLEtBQUosR0FBWSxRQVZEO0FBV1gsS0FBQ2IsRUFBRSxDQUFDYyxJQUFKLEdBQVcsTUFYQTtBQVlYLEtBQUNkLEVBQUUsQ0FBQ2UsT0FBSixHQUFjLFVBWkg7QUFhWCxLQUFDZixFQUFFLENBQUNnQixLQUFKLEdBQVksT0FiRDtBQWNYLEtBQUNoQixFQUFFLENBQUNpQixRQUFKLEdBQWUsV0FkSjtBQWVYLEtBQUNqQixFQUFFLENBQUNrQixVQUFKLEdBQWlCLE1BZk47QUFnQlgsS0FBQ2xCLEVBQUUsQ0FBQ21CLFFBQUosR0FBZSxNQWhCSjtBQWlCWCxLQUFDbkIsRUFBRSxDQUFDb0IsU0FBSixHQUFnQixNQWpCTDtBQWtCWCxLQUFDcEIsRUFBRSxDQUFDcUIsTUFBSixHQUFhLEdBbEJGO0FBbUJYLEtBQUNyQixFQUFFLENBQUNzQixTQUFKLEdBQWdCLElBbkJMO0FBb0JYLEtBQUN0QixFQUFFLENBQUN1QixPQUFKLEdBQWMsSUFwQkg7QUFxQlgsS0FBQ3ZCLEVBQUUsQ0FBQ3dCLFVBQUosR0FBaUIsS0FyQk47QUFzQlgsS0FBQ3hCLEVBQUUsQ0FBQ3lCLE9BQUosR0FBYyxTQXRCSDtBQXVCWCxLQUFDekIsRUFBRSxDQUFDMEIsVUFBSixHQUFpQixhQXZCTjtBQXdCWCxLQUFDMUIsRUFBRSxDQUFDMkIsT0FBSixHQUFjLElBeEJIO0FBeUJYLEtBQUMzQixFQUFFLENBQUM0QixRQUFKLEdBQWUsSUF6Qko7QUEwQlgsS0FBQzVCLEVBQUUsQ0FBQzZCLFNBQUosR0FBZ0IsSUExQkw7QUEyQlgsS0FBQzdCLEVBQUUsQ0FBQzhCLFFBQUosR0FBZSxLQTNCSjtBQTRCWCxLQUFDOUIsRUFBRSxDQUFDK0IsVUFBSixHQUFpQixJQTVCTjtBQTZCWCxLQUFDL0IsRUFBRSxDQUFDZ0MsV0FBSixHQUFrQixJQTdCUDtBQThCWCxLQUFDaEMsRUFBRSxDQUFDaUMsYUFBSixHQUFvQixJQTlCVDtBQStCWCxLQUFDakMsRUFBRSxDQUFDa0MsWUFBSixHQUFtQixJQS9CUjtBQWdDWCxLQUFDbEMsRUFBRSxDQUFDbUMsR0FBSixHQUFVLEtBaENDO0FBaUNYLEtBQUNuQyxFQUFFLENBQUNvQyxHQUFKLEdBQVUsS0FqQ0M7QUFrQ1gsS0FBQ3BDLEVBQUUsQ0FBQ3FDLEdBQUosR0FBVSxPQWxDQztBQW1DWCxLQUFDckMsRUFBRSxDQUFDc0MsRUFBSixHQUFTLE1BbkNFO0FBb0NYLEtBQUN0QyxFQUFFLENBQUN1QyxHQUFKLEdBQVUsS0FwQ0M7QUFxQ1gsS0FBQ3ZDLEVBQUUsQ0FBQ3dDLFdBQUosR0FBa0I7QUFyQ1AsR0FEUztBQXlDdEJDLEVBQUFBLGlCQUFpQixFQUFFLEVBekNHOztBQTJDdEJDLEVBQUFBLG1CQUFtQixDQUFDQyxPQUFELEVBQVU7QUFDM0IsUUFBSSxDQUFDQSxPQUFELElBQVk3QyxDQUFDLENBQUM4QyxPQUFGLENBQVVELE9BQVYsQ0FBaEIsRUFBb0M7QUFDbEMsV0FBS0YsaUJBQUwsR0FBeUIsS0FBekI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLQSxpQkFBTCxHQUF5QkksTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsT0FBbEIsQ0FBekI7QUFDRDtBQUNGLEdBakRxQjs7QUFtRHRCSSxFQUFBQSxlQUFlLENBQUNDLElBQUQsRUFBTztBQUNwQixVQUFNQyxHQUFHLEdBQUcsRUFBWjs7QUFDQSxRQUFJLENBQUMsS0FBS1IsaUJBQVYsRUFBNkI7QUFDM0IsYUFBT08sSUFBUDtBQUNEOztBQUVEL0MsSUFBQUEsS0FBSyxDQUFDaUQsWUFBTixDQUFtQkYsSUFBbkIsRUFBeUJHLE9BQXpCLENBQWlDQyxFQUFFLElBQUk7QUFDckMsWUFBTUMsSUFBSSxHQUFHTCxJQUFJLENBQUNJLEVBQUQsQ0FBakI7O0FBQ0EsVUFBSXRELENBQUMsQ0FBQ3dELGFBQUYsQ0FBZ0JELElBQWhCLENBQUosRUFBMkI7QUFDekJKLFFBQUFBLEdBQUcsQ0FBQ0csRUFBRCxDQUFILEdBQVUsS0FBS0wsZUFBTCxDQUFxQk0sSUFBckIsQ0FBVjtBQUNELE9BRkQsTUFFTztBQUNMSixRQUFBQSxHQUFHLENBQUNHLEVBQUQsQ0FBSCxHQUFVQyxJQUFWO0FBQ0Q7QUFDRixLQVBEOztBQVNBdkQsSUFBQUEsQ0FBQyxDQUFDeUQsTUFBRixDQUFTUCxJQUFULEVBQWUsQ0FBQ0ssSUFBRCxFQUFPRyxJQUFQLEtBQWdCO0FBQzdCQSxNQUFBQSxJQUFJLEdBQUcsS0FBS2YsaUJBQUwsQ0FBdUJlLElBQXZCLEtBQWdDQSxJQUF2Qzs7QUFDQSxVQUFJMUQsQ0FBQyxDQUFDd0QsYUFBRixDQUFnQkQsSUFBaEIsQ0FBSixFQUEyQjtBQUN6QkEsUUFBQUEsSUFBSSxHQUFHLEtBQUtOLGVBQUwsQ0FBcUJNLElBQXJCLENBQVA7QUFDRDs7QUFDREosTUFBQUEsR0FBRyxDQUFDTyxJQUFELENBQUgsR0FBWUgsSUFBWjtBQUNELEtBTkQ7O0FBT0EsV0FBT0osR0FBUDtBQUNEOztBQTFFcUIsQ0FBeEI7QUE2RUFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhELGVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5jb25zdCBPcCA9IHJlcXVpcmUoJy4uLy4uLy4uL29wZXJhdG9ycycpO1xyXG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzJyk7XHJcblxyXG5jb25zdCBPcGVyYXRvckhlbHBlcnMgPSB7XHJcbiAgT3BlcmF0b3JNYXA6IHtcclxuICAgIFtPcC5lcV06ICc9JyxcclxuICAgIFtPcC5uZV06ICchPScsXHJcbiAgICBbT3AuZ3RlXTogJz49JyxcclxuICAgIFtPcC5ndF06ICc+JyxcclxuICAgIFtPcC5sdGVdOiAnPD0nLFxyXG4gICAgW09wLmx0XTogJzwnLFxyXG4gICAgW09wLm5vdF06ICdJUyBOT1QnLFxyXG4gICAgW09wLmlzXTogJ0lTJyxcclxuICAgIFtPcC5pbl06ICdJTicsXHJcbiAgICBbT3Aubm90SW5dOiAnTk9UIElOJyxcclxuICAgIFtPcC5saWtlXTogJ0xJS0UnLFxyXG4gICAgW09wLm5vdExpa2VdOiAnTk9UIExJS0UnLFxyXG4gICAgW09wLmlMaWtlXTogJ0lMSUtFJyxcclxuICAgIFtPcC5ub3RJTGlrZV06ICdOT1QgSUxJS0UnLFxyXG4gICAgW09wLnN0YXJ0c1dpdGhdOiAnTElLRScsXHJcbiAgICBbT3AuZW5kc1dpdGhdOiAnTElLRScsXHJcbiAgICBbT3Auc3Vic3RyaW5nXTogJ0xJS0UnLFxyXG4gICAgW09wLnJlZ2V4cF06ICd+JyxcclxuICAgIFtPcC5ub3RSZWdleHBdOiAnIX4nLFxyXG4gICAgW09wLmlSZWdleHBdOiAnfionLFxyXG4gICAgW09wLm5vdElSZWdleHBdOiAnIX4qJyxcclxuICAgIFtPcC5iZXR3ZWVuXTogJ0JFVFdFRU4nLFxyXG4gICAgW09wLm5vdEJldHdlZW5dOiAnTk9UIEJFVFdFRU4nLFxyXG4gICAgW09wLm92ZXJsYXBdOiAnJiYnLFxyXG4gICAgW09wLmNvbnRhaW5zXTogJ0A+JyxcclxuICAgIFtPcC5jb250YWluZWRdOiAnPEAnLFxyXG4gICAgW09wLmFkamFjZW50XTogJy18LScsXHJcbiAgICBbT3Auc3RyaWN0TGVmdF06ICc8PCcsXHJcbiAgICBbT3Auc3RyaWN0UmlnaHRdOiAnPj4nLFxyXG4gICAgW09wLm5vRXh0ZW5kUmlnaHRdOiAnJjwnLFxyXG4gICAgW09wLm5vRXh0ZW5kTGVmdF06ICcmPicsXHJcbiAgICBbT3AuYW55XTogJ0FOWScsXHJcbiAgICBbT3AuYWxsXTogJ0FMTCcsXHJcbiAgICBbT3AuYW5kXTogJyBBTkQgJyxcclxuICAgIFtPcC5vcl06ICcgT1IgJyxcclxuICAgIFtPcC5jb2xdOiAnQ09MJyxcclxuICAgIFtPcC5wbGFjZWhvbGRlcl06ICckJFBMQUNFSE9MREVSJCQnXHJcbiAgfSxcclxuXHJcbiAgT3BlcmF0b3JzQWxpYXNNYXA6IHt9LFxyXG5cclxuICBzZXRPcGVyYXRvcnNBbGlhc2VzKGFsaWFzZXMpIHtcclxuICAgIGlmICghYWxpYXNlcyB8fCBfLmlzRW1wdHkoYWxpYXNlcykpIHtcclxuICAgICAgdGhpcy5PcGVyYXRvcnNBbGlhc01hcCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5PcGVyYXRvcnNBbGlhc01hcCA9IE9iamVjdC5hc3NpZ24oe30sIGFsaWFzZXMpO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIF9yZXBsYWNlQWxpYXNlcyhvcmlnKSB7XHJcbiAgICBjb25zdCBvYmogPSB7fTtcclxuICAgIGlmICghdGhpcy5PcGVyYXRvcnNBbGlhc01hcCkge1xyXG4gICAgICByZXR1cm4gb3JpZztcclxuICAgIH1cclxuXHJcbiAgICBVdGlscy5nZXRPcGVyYXRvcnMob3JpZykuZm9yRWFjaChvcCA9PiB7XHJcbiAgICAgIGNvbnN0IGl0ZW0gPSBvcmlnW29wXTtcclxuICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChpdGVtKSkge1xyXG4gICAgICAgIG9ialtvcF0gPSB0aGlzLl9yZXBsYWNlQWxpYXNlcyhpdGVtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYmpbb3BdID0gaXRlbTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgXy5mb3JPd24ob3JpZywgKGl0ZW0sIHByb3ApID0+IHtcclxuICAgICAgcHJvcCA9IHRoaXMuT3BlcmF0b3JzQWxpYXNNYXBbcHJvcF0gfHwgcHJvcDtcclxuICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChpdGVtKSkge1xyXG4gICAgICAgIGl0ZW0gPSB0aGlzLl9yZXBsYWNlQWxpYXNlcyhpdGVtKTtcclxuICAgICAgfVxyXG4gICAgICBvYmpbcHJvcF0gPSBpdGVtO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gT3BlcmF0b3JIZWxwZXJzO1xyXG4iXX0=