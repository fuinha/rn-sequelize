'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

let AbstractDialect = function AbstractDialect() {
  _classCallCheck(this, AbstractDialect);
};

AbstractDialect.prototype.supports = {
  'DEFAULT': true,
  'DEFAULT VALUES': false,
  'VALUES ()': false,
  'LIMIT ON UPDATE': false,
  'ON DUPLICATE KEY': true,
  'ORDER NULLS': false,
  'UNION': true,
  'UNION ALL': true,
  'RIGHT JOIN': true,

  /* does the dialect support returning values for inserted/updated fields */
  returnValues: false,

  /* features specific to autoIncrement values */
  autoIncrement: {
    /* does the dialect require modification of insert queries when inserting auto increment fields */
    identityInsert: false,

    /* does the dialect support inserting default/null values for autoincrement fields */
    defaultValue: true,

    /* does the dialect support updating autoincrement fields */
    update: true
  },

  /* Do we need to say DEFAULT for bulk insert */
  bulkDefault: false,
  schemas: false,
  transactions: true,
  settingIsolationLevelDuringTransaction: true,
  transactionOptions: {
    type: false
  },
  migrations: true,
  upserts: true,
  inserts: {
    ignoreDuplicates: '',

    /* dialect specific words for INSERT IGNORE or DO NOTHING */
    updateOnDuplicate: false,

    /* whether dialect supports ON DUPLICATE KEY UPDATE */
    onConflictDoNothing: ''
    /* dialect specific words for ON CONFLICT DO NOTHING */

  },
  constraints: {
    restrict: true,
    addConstraint: true,
    dropConstraint: true,
    unique: true,
    default: false,
    check: true,
    foreignKey: true,
    primaryKey: true
  },
  index: {
    collate: true,
    length: false,
    parser: false,
    concurrently: false,
    type: false,
    using: true,
    functionBased: false
  },
  joinTableDependent: true,
  groupedLimit: true,
  indexViaAlter: false,
  JSON: false,
  deferrableConstraints: false
};
module.exports = AbstractDialect;
module.exports.AbstractDialect = AbstractDialect;
module.exports.default = AbstractDialect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9kaWFsZWN0cy9hYnN0cmFjdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJBYnN0cmFjdERpYWxlY3QiLCJwcm90b3R5cGUiLCJzdXBwb3J0cyIsInJldHVyblZhbHVlcyIsImF1dG9JbmNyZW1lbnQiLCJpZGVudGl0eUluc2VydCIsImRlZmF1bHRWYWx1ZSIsInVwZGF0ZSIsImJ1bGtEZWZhdWx0Iiwic2NoZW1hcyIsInRyYW5zYWN0aW9ucyIsInNldHRpbmdJc29sYXRpb25MZXZlbER1cmluZ1RyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb25PcHRpb25zIiwidHlwZSIsIm1pZ3JhdGlvbnMiLCJ1cHNlcnRzIiwiaW5zZXJ0cyIsImlnbm9yZUR1cGxpY2F0ZXMiLCJ1cGRhdGVPbkR1cGxpY2F0ZSIsIm9uQ29uZmxpY3REb05vdGhpbmciLCJjb25zdHJhaW50cyIsInJlc3RyaWN0IiwiYWRkQ29uc3RyYWludCIsImRyb3BDb25zdHJhaW50IiwidW5pcXVlIiwiZGVmYXVsdCIsImNoZWNrIiwiZm9yZWlnbktleSIsInByaW1hcnlLZXkiLCJpbmRleCIsImNvbGxhdGUiLCJsZW5ndGgiLCJwYXJzZXIiLCJjb25jdXJyZW50bHkiLCJ1c2luZyIsImZ1bmN0aW9uQmFzZWQiLCJqb2luVGFibGVEZXBlbmRlbnQiLCJncm91cGVkTGltaXQiLCJpbmRleFZpYUFsdGVyIiwiSlNPTiIsImRlZmVycmFibGVDb25zdHJhaW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0lBRU1BLGU7Ozs7QUFFTkEsZUFBZSxDQUFDQyxTQUFoQixDQUEwQkMsUUFBMUIsR0FBcUM7QUFDbkMsYUFBVyxJQUR3QjtBQUVuQyxvQkFBa0IsS0FGaUI7QUFHbkMsZUFBYSxLQUhzQjtBQUluQyxxQkFBbUIsS0FKZ0I7QUFLbkMsc0JBQW9CLElBTGU7QUFNbkMsaUJBQWUsS0FOb0I7QUFPbkMsV0FBUyxJQVAwQjtBQVFuQyxlQUFhLElBUnNCO0FBU25DLGdCQUFjLElBVHFCOztBQVduQztBQUNBQyxFQUFBQSxZQUFZLEVBQUUsS0FacUI7O0FBY25DO0FBQ0FDLEVBQUFBLGFBQWEsRUFBRTtBQUNiO0FBQ0FDLElBQUFBLGNBQWMsRUFBRSxLQUZIOztBQUliO0FBQ0FDLElBQUFBLFlBQVksRUFBRSxJQUxEOztBQU9iO0FBQ0FDLElBQUFBLE1BQU0sRUFBRTtBQVJLLEdBZm9COztBQXlCbkM7QUFDQUMsRUFBQUEsV0FBVyxFQUFFLEtBMUJzQjtBQTJCbkNDLEVBQUFBLE9BQU8sRUFBRSxLQTNCMEI7QUE0Qm5DQyxFQUFBQSxZQUFZLEVBQUUsSUE1QnFCO0FBNkJuQ0MsRUFBQUEsc0NBQXNDLEVBQUUsSUE3Qkw7QUE4Qm5DQyxFQUFBQSxrQkFBa0IsRUFBRTtBQUNsQkMsSUFBQUEsSUFBSSxFQUFFO0FBRFksR0E5QmU7QUFpQ25DQyxFQUFBQSxVQUFVLEVBQUUsSUFqQ3VCO0FBa0NuQ0MsRUFBQUEsT0FBTyxFQUFFLElBbEMwQjtBQW1DbkNDLEVBQUFBLE9BQU8sRUFBRTtBQUNQQyxJQUFBQSxnQkFBZ0IsRUFBRSxFQURYOztBQUNlO0FBQ3RCQyxJQUFBQSxpQkFBaUIsRUFBRSxLQUZaOztBQUVtQjtBQUMxQkMsSUFBQUEsbUJBQW1CLEVBQUU7QUFBRzs7QUFIakIsR0FuQzBCO0FBd0NuQ0MsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLFFBQVEsRUFBRSxJQURDO0FBRVhDLElBQUFBLGFBQWEsRUFBRSxJQUZKO0FBR1hDLElBQUFBLGNBQWMsRUFBRSxJQUhMO0FBSVhDLElBQUFBLE1BQU0sRUFBRSxJQUpHO0FBS1hDLElBQUFBLE9BQU8sRUFBRSxLQUxFO0FBTVhDLElBQUFBLEtBQUssRUFBRSxJQU5JO0FBT1hDLElBQUFBLFVBQVUsRUFBRSxJQVBEO0FBUVhDLElBQUFBLFVBQVUsRUFBRTtBQVJELEdBeENzQjtBQWtEbkNDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxPQUFPLEVBQUUsSUFESjtBQUVMQyxJQUFBQSxNQUFNLEVBQUUsS0FGSDtBQUdMQyxJQUFBQSxNQUFNLEVBQUUsS0FISDtBQUlMQyxJQUFBQSxZQUFZLEVBQUUsS0FKVDtBQUtMcEIsSUFBQUEsSUFBSSxFQUFFLEtBTEQ7QUFNTHFCLElBQUFBLEtBQUssRUFBRSxJQU5GO0FBT0xDLElBQUFBLGFBQWEsRUFBRTtBQVBWLEdBbEQ0QjtBQTJEbkNDLEVBQUFBLGtCQUFrQixFQUFFLElBM0RlO0FBNERuQ0MsRUFBQUEsWUFBWSxFQUFFLElBNURxQjtBQTZEbkNDLEVBQUFBLGFBQWEsRUFBRSxLQTdEb0I7QUE4RG5DQyxFQUFBQSxJQUFJLEVBQUUsS0E5RDZCO0FBK0RuQ0MsRUFBQUEscUJBQXFCLEVBQUU7QUEvRFksQ0FBckM7QUFrRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFDLGVBQWpCO0FBQ0F5QyxNQUFNLENBQUNDLE9BQVAsQ0FBZTFDLGVBQWYsR0FBaUNBLGVBQWpDO0FBQ0F5QyxNQUFNLENBQUNDLE9BQVAsQ0FBZWpCLE9BQWYsR0FBeUJ6QixlQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNsYXNzIEFic3RyYWN0RGlhbGVjdCB7fVxyXG5cclxuQWJzdHJhY3REaWFsZWN0LnByb3RvdHlwZS5zdXBwb3J0cyA9IHtcclxuICAnREVGQVVMVCc6IHRydWUsXHJcbiAgJ0RFRkFVTFQgVkFMVUVTJzogZmFsc2UsXHJcbiAgJ1ZBTFVFUyAoKSc6IGZhbHNlLFxyXG4gICdMSU1JVCBPTiBVUERBVEUnOiBmYWxzZSxcclxuICAnT04gRFVQTElDQVRFIEtFWSc6IHRydWUsXHJcbiAgJ09SREVSIE5VTExTJzogZmFsc2UsXHJcbiAgJ1VOSU9OJzogdHJ1ZSxcclxuICAnVU5JT04gQUxMJzogdHJ1ZSxcclxuICAnUklHSFQgSk9JTic6IHRydWUsXHJcblxyXG4gIC8qIGRvZXMgdGhlIGRpYWxlY3Qgc3VwcG9ydCByZXR1cm5pbmcgdmFsdWVzIGZvciBpbnNlcnRlZC91cGRhdGVkIGZpZWxkcyAqL1xyXG4gIHJldHVyblZhbHVlczogZmFsc2UsXHJcblxyXG4gIC8qIGZlYXR1cmVzIHNwZWNpZmljIHRvIGF1dG9JbmNyZW1lbnQgdmFsdWVzICovXHJcbiAgYXV0b0luY3JlbWVudDoge1xyXG4gICAgLyogZG9lcyB0aGUgZGlhbGVjdCByZXF1aXJlIG1vZGlmaWNhdGlvbiBvZiBpbnNlcnQgcXVlcmllcyB3aGVuIGluc2VydGluZyBhdXRvIGluY3JlbWVudCBmaWVsZHMgKi9cclxuICAgIGlkZW50aXR5SW5zZXJ0OiBmYWxzZSxcclxuXHJcbiAgICAvKiBkb2VzIHRoZSBkaWFsZWN0IHN1cHBvcnQgaW5zZXJ0aW5nIGRlZmF1bHQvbnVsbCB2YWx1ZXMgZm9yIGF1dG9pbmNyZW1lbnQgZmllbGRzICovXHJcbiAgICBkZWZhdWx0VmFsdWU6IHRydWUsXHJcblxyXG4gICAgLyogZG9lcyB0aGUgZGlhbGVjdCBzdXBwb3J0IHVwZGF0aW5nIGF1dG9pbmNyZW1lbnQgZmllbGRzICovXHJcbiAgICB1cGRhdGU6IHRydWVcclxuICB9LFxyXG4gIC8qIERvIHdlIG5lZWQgdG8gc2F5IERFRkFVTFQgZm9yIGJ1bGsgaW5zZXJ0ICovXHJcbiAgYnVsa0RlZmF1bHQ6IGZhbHNlLFxyXG4gIHNjaGVtYXM6IGZhbHNlLFxyXG4gIHRyYW5zYWN0aW9uczogdHJ1ZSxcclxuICBzZXR0aW5nSXNvbGF0aW9uTGV2ZWxEdXJpbmdUcmFuc2FjdGlvbjogdHJ1ZSxcclxuICB0cmFuc2FjdGlvbk9wdGlvbnM6IHtcclxuICAgIHR5cGU6IGZhbHNlXHJcbiAgfSxcclxuICBtaWdyYXRpb25zOiB0cnVlLFxyXG4gIHVwc2VydHM6IHRydWUsXHJcbiAgaW5zZXJ0czoge1xyXG4gICAgaWdub3JlRHVwbGljYXRlczogJycsIC8qIGRpYWxlY3Qgc3BlY2lmaWMgd29yZHMgZm9yIElOU0VSVCBJR05PUkUgb3IgRE8gTk9USElORyAqL1xyXG4gICAgdXBkYXRlT25EdXBsaWNhdGU6IGZhbHNlLCAvKiB3aGV0aGVyIGRpYWxlY3Qgc3VwcG9ydHMgT04gRFVQTElDQVRFIEtFWSBVUERBVEUgKi9cclxuICAgIG9uQ29uZmxpY3REb05vdGhpbmc6ICcnIC8qIGRpYWxlY3Qgc3BlY2lmaWMgd29yZHMgZm9yIE9OIENPTkZMSUNUIERPIE5PVEhJTkcgKi9cclxuICB9LFxyXG4gIGNvbnN0cmFpbnRzOiB7XHJcbiAgICByZXN0cmljdDogdHJ1ZSxcclxuICAgIGFkZENvbnN0cmFpbnQ6IHRydWUsXHJcbiAgICBkcm9wQ29uc3RyYWludDogdHJ1ZSxcclxuICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgY2hlY2s6IHRydWUsXHJcbiAgICBmb3JlaWduS2V5OiB0cnVlLFxyXG4gICAgcHJpbWFyeUtleTogdHJ1ZVxyXG4gIH0sXHJcbiAgaW5kZXg6IHtcclxuICAgIGNvbGxhdGU6IHRydWUsXHJcbiAgICBsZW5ndGg6IGZhbHNlLFxyXG4gICAgcGFyc2VyOiBmYWxzZSxcclxuICAgIGNvbmN1cnJlbnRseTogZmFsc2UsXHJcbiAgICB0eXBlOiBmYWxzZSxcclxuICAgIHVzaW5nOiB0cnVlLFxyXG4gICAgZnVuY3Rpb25CYXNlZDogZmFsc2VcclxuICB9LFxyXG4gIGpvaW5UYWJsZURlcGVuZGVudDogdHJ1ZSxcclxuICBncm91cGVkTGltaXQ6IHRydWUsXHJcbiAgaW5kZXhWaWFBbHRlcjogZmFsc2UsXHJcbiAgSlNPTjogZmFsc2UsXHJcbiAgZGVmZXJyYWJsZUNvbnN0cmFpbnRzOiBmYWxzZVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdERpYWxlY3Q7XHJcbm1vZHVsZS5leHBvcnRzLkFic3RyYWN0RGlhbGVjdCA9IEFic3RyYWN0RGlhbGVjdDtcclxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IEFic3RyYWN0RGlhbGVjdDtcclxuIl19