'use strict';
/**
 * Operator symbols to be used when querying data
 *
 * @see {@link Model#where}
 *
 * @property eq
 * @property ne
 * @property gte
 * @property gt
 * @property lte
 * @property lt
 * @property not
 * @property is
 * @property in
 * @property notIn
 * @property like
 * @property notLike
 * @property iLike
 * @property notILike
 * @property startsWith
 * @property endsWith
 * @property substring
 * @property regexp
 * @property notRegexp
 * @property iRegexp
 * @property notIRegexp
 * @property between
 * @property notBetween
 * @property overlap
 * @property contains
 * @property contained
 * @property adjacent
 * @property strictLeft
 * @property strictRight
 * @property noExtendRight
 * @property noExtendLeft
 * @property and
 * @property or
 * @property any
 * @property all
 * @property values
 * @property col
 * @property placeholder
 * @property join
 */

const Op = {
  eq: Symbol.for('eq'),
  ne: Symbol.for('ne'),
  gte: Symbol.for('gte'),
  gt: Symbol.for('gt'),
  lte: Symbol.for('lte'),
  lt: Symbol.for('lt'),
  not: Symbol.for('not'),
  is: Symbol.for('is'),
  in: Symbol.for('in'),
  notIn: Symbol.for('notIn'),
  like: Symbol.for('like'),
  notLike: Symbol.for('notLike'),
  iLike: Symbol.for('iLike'),
  notILike: Symbol.for('notILike'),
  startsWith: Symbol.for('startsWith'),
  endsWith: Symbol.for('endsWith'),
  substring: Symbol.for('substring'),
  regexp: Symbol.for('regexp'),
  notRegexp: Symbol.for('notRegexp'),
  iRegexp: Symbol.for('iRegexp'),
  notIRegexp: Symbol.for('notIRegexp'),
  between: Symbol.for('between'),
  notBetween: Symbol.for('notBetween'),
  overlap: Symbol.for('overlap'),
  contains: Symbol.for('contains'),
  contained: Symbol.for('contained'),
  adjacent: Symbol.for('adjacent'),
  strictLeft: Symbol.for('strictLeft'),
  strictRight: Symbol.for('strictRight'),
  noExtendRight: Symbol.for('noExtendRight'),
  noExtendLeft: Symbol.for('noExtendLeft'),
  and: Symbol.for('and'),
  or: Symbol.for('or'),
  any: Symbol.for('any'),
  all: Symbol.for('all'),
  values: Symbol.for('values'),
  col: Symbol.for('col'),
  placeholder: Symbol.for('placeholder'),
  join: Symbol.for('join')
};
module.exports = Op;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9vcGVyYXRvcnMuanMiXSwibmFtZXMiOlsiT3AiLCJlcSIsIlN5bWJvbCIsImZvciIsIm5lIiwiZ3RlIiwiZ3QiLCJsdGUiLCJsdCIsIm5vdCIsImlzIiwiaW4iLCJub3RJbiIsImxpa2UiLCJub3RMaWtlIiwiaUxpa2UiLCJub3RJTGlrZSIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsInJlZ2V4cCIsIm5vdFJlZ2V4cCIsImlSZWdleHAiLCJub3RJUmVnZXhwIiwiYmV0d2VlbiIsIm5vdEJldHdlZW4iLCJvdmVybGFwIiwiY29udGFpbnMiLCJjb250YWluZWQiLCJhZGphY2VudCIsInN0cmljdExlZnQiLCJzdHJpY3RSaWdodCIsIm5vRXh0ZW5kUmlnaHQiLCJub0V4dGVuZExlZnQiLCJhbmQiLCJvciIsImFueSIsImFsbCIsInZhbHVlcyIsImNvbCIsInBsYWNlaG9sZGVyIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2Q0EsTUFBTUEsRUFBRSxHQUFHO0FBQ1RDLEVBQUFBLEVBQUUsRUFBRUMsTUFBTSxDQUFDQyxHQUFQLENBQVcsSUFBWCxDQURLO0FBRVRDLEVBQUFBLEVBQUUsRUFBRUYsTUFBTSxDQUFDQyxHQUFQLENBQVcsSUFBWCxDQUZLO0FBR1RFLEVBQUFBLEdBQUcsRUFBRUgsTUFBTSxDQUFDQyxHQUFQLENBQVcsS0FBWCxDQUhJO0FBSVRHLEVBQUFBLEVBQUUsRUFBRUosTUFBTSxDQUFDQyxHQUFQLENBQVcsSUFBWCxDQUpLO0FBS1RJLEVBQUFBLEdBQUcsRUFBRUwsTUFBTSxDQUFDQyxHQUFQLENBQVcsS0FBWCxDQUxJO0FBTVRLLEVBQUFBLEVBQUUsRUFBRU4sTUFBTSxDQUFDQyxHQUFQLENBQVcsSUFBWCxDQU5LO0FBT1RNLEVBQUFBLEdBQUcsRUFBRVAsTUFBTSxDQUFDQyxH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QUksRUFBRXZDLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLE1BQVg7QUF2Q0csQ0FBWDtBQTBDQXVDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNDLEVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbid1c2Ugc3RyaWN0JztcclxuLyoqXHJcbiAqIE9wZXJhdG9yIHN5bWJvbHMgdG8gYmUgdXNlZCB3aGVuIHF1ZXJ5aW5nIGRhdGFcclxuICpcclxuICogQHNlZSB7QGxpbmsgTW9kZWwjd2hlcmV9XHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSBlcVxyXG4gKiBAcHJvcGVydHkgbmVcclxuICogQHByb3BlcnR5IGd0ZVxyXG4gKiBAcHJvcGVydHkgZ3RcclxuICogQHByb3BlcnR5IGx0ZVxyXG4gKiBAcHJvcGVydHkgbHRcclxuICogQHByb3BlcnR5IG5vdFxyXG4gKiBAcHJvcGVydHkgaXNcclxuICogQHByb3BlcnR5IGluXHJcbiAqIEBwcm9wZXJ0eSBub3RJblxyXG4gKiBAcHJvcGVydHkgbGlrZVxyXG4gKiBAcHJvcGVydHkgbm90TGlrZVxyXG4gKiBAcHJvcGVydHkgaUxpa2VcclxuICogQHByb3BlcnR5IG5vdElMaWtlXHJcbiAqIEBwcm9wZXJ0eSBzdGFydHNXaXRoXHJcbiAqIEBwcm9wZXJ0eSBlbmRzV2l0aFxyXG4gKiBAcHJvcGVydHkgc3Vic3RyaW5nXHJcbiAqIEBwcm9wZXJ0eSByZWdleHBcclxuICogQHByb3BlcnR5IG5vdFJlZ2V4cFxyXG4gKiBAcHJvcGVydHkgaVJlZ2V4cFxyXG4gKiBAcHJvcGVydHkgbm90SVJlZ2V4cFxyXG4gKiBAcHJvcGVydHkgYmV0d2VlblxyXG4gKiBAcHJvcGVydHkgbm90QmV0d2VlblxyXG4gKiBAcHJvcGVydHkgb3ZlcmxhcFxyXG4gKiBAcHJvcGVydHkgY29udGFpbnNcclxuICogQHByb3BlcnR5IGNvbnRhaW5lZFxyXG4gKiBAcHJvcGVydHkgYWRqYWNlbnRcclxuICogQHByb3BlcnR5IHN0cmljdExlZnRcclxuICogQHByb3BlcnR5IHN0cmljdFJpZ2h0XHJcbiAqIEBwcm9wZXJ0eSBub0V4dGVuZFJpZ2h0XHJcbiAqIEBwcm9wZXJ0eSBub0V4dGVuZExlZnRcclxuICogQHByb3BlcnR5IGFuZFxyXG4gKiBAcHJvcGVydHkgb3JcclxuICogQHByb3BlcnR5IGFueVxyXG4gKiBAcHJvcGVydHkgYWxsXHJcbiAqIEBwcm9wZXJ0eSB2YWx1ZXNcclxuICogQHByb3BlcnR5IGNvbFxyXG4gKiBAcHJvcGVydHkgcGxhY2Vob2xkZXJcclxuICogQHByb3BlcnR5IGpvaW5cclxuICovXHJcbmNvbnN0IE9wID0ge1xyXG4gIGVxOiBTeW1ib2wuZm9yKCdlcScpLFxyXG4gIG5lOiBTeW1ib2wuZm9yKCduZScpLFxyXG4gIGd0ZTogU3ltYm9sLmZvcignZ3RlJyksXHJcbiAgZ3Q6IFN5bWJvbC5mb3IoJ2d0JyksXHJcbiAgbHRlOiBTeW1ib2wuZm9yKCdsdGUnKSxcclxuICBsdDogU3ltYm9sLmZvcignbHQnKSxcclxuICBub3Q6IFN5bWJvbC5mb3IoJ25vdCcpLFxyXG4gIGlzOiBTeW1ib2wuZm9yKCdpcycpLFxyXG4gIGluOiBTeW1ib2wuZm9yKCdpbicpLFxyXG4gIG5vdEluOiBTeW1ib2wuZm9yKCdub3RJbicpLFxyXG4gIGxpa2U6IFN5bWJvbC5mb3IoJ2xpa2UnKSxcclxuICBub3RMaWtlOiBTeW1ib2wuZm9yKCdub3RMaWtlJyksXHJcbiAgaUxpa2U6IFN5bWJvbC5mb3IoJ2lMaWtlJyksXHJcbiAgbm90SUxpa2U6IFN5bWJvbC5mb3IoJ25vdElMaWtlJyksXHJcbiAgc3RhcnRzV2l0aDogU3ltYm9sLmZvcignc3RhcnRzV2l0aCcpLFxyXG4gIGVuZHNXaXRoOiBTeW1ib2wuZm9yKCdlbmRzV2l0aCcpLFxyXG4gIHN1YnN0cmluZzogU3ltYm9sLmZvcignc3Vic3RyaW5nJyksXHJcbiAgcmVnZXhwOiBTeW1ib2wuZm9yKCdyZWdleHAnKSxcclxuICBub3RSZWdleHA6IFN5bWJvbC5mb3IoJ25vdFJlZ2V4cCcpLFxyXG4gIGlSZWdleHA6IFN5bWJvbC5mb3IoJ2lSZWdleHAnKSxcclxuICBub3RJUmVnZXhwOiBTeW1ib2wuZm9yKCdub3RJUmVnZXhwJyksXHJcbiAgYmV0d2VlbjogU3ltYm9sLmZvcignYmV0d2VlbicpLFxyXG4gIG5vdEJldHdlZW46IFN5bWJvbC5mb3IoJ25vdEJldHdlZW4nKSxcclxuICBvdmVybGFwOiBTeW1ib2wuZm9yKCdvdmVybGFwJyksXHJcbiAgY29udGFpbnM6IFN5bWJvbC5mb3IoJ2NvbnRhaW5zJyksXHJcbiAgY29udGFpbmVkOiBTeW1ib2wuZm9yKCdjb250YWluZWQnKSxcclxuICBhZGphY2VudDogU3ltYm9sLmZvcignYWRqYWNlbnQnKSxcclxuICBzdHJpY3RMZWZ0OiBTeW1ib2wuZm9yKCdzdHJpY3RMZWZ0JyksXHJcbiAgc3RyaWN0UmlnaHQ6IFN5bWJvbC5mb3IoJ3N0cmljdFJpZ2h0JyksXHJcbiAgbm9FeHRlbmRSaWdodDogU3ltYm9sLmZvcignbm9FeHRlbmRSaWdodCcpLFxyXG4gIG5vRXh0ZW5kTGVmdDogU3ltYm9sLmZvcignbm9FeHRlbmRMZWZ0JyksXHJcbiAgYW5kOiBTeW1ib2wuZm9yKCdhbmQnKSxcclxuICBvcjogU3ltYm9sLmZvcignb3InKSxcclxuICBhbnk6IFN5bWJvbC5mb3IoJ2FueScpLFxyXG4gIGFsbDogU3ltYm9sLmZvcignYWxsJyksXHJcbiAgdmFsdWVzOiBTeW1ib2wuZm9yKCd2YWx1ZXMnKSxcclxuICBjb2w6IFN5bWJvbC5mb3IoJ2NvbCcpLFxyXG4gIHBsYWNlaG9sZGVyOiBTeW1ib2wuZm9yKCdwbGFjZWhvbGRlcicpLFxyXG4gIGpvaW46IFN5bWJvbC5mb3IoJ2pvaW4nKVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBPcDtcclxuIl19